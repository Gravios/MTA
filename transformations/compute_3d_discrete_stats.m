function [xcomp,ycomp,zcomp,wcomp] = compute_3d_discrete_stats(xcomp,ycomp,zcomp,vals)

xcomp.edgs = xcomp.edgs(:)';
ycomp.edgs = ycomp.edgs(:)';
zcomp.edgs = zcomp.edgs(:)';

xcomp.ctrs = mean([xcomp.edgs(1:end-1);xcomp.edgs(2:end)]);
ycomp.ctrs = mean([ycomp.edgs(1:end-1);ycomp.edgs(2:end)]);
zcomp.ctrs = mean([zcomp.edgs(1:end-1);zcomp.edgs(2:end)]);

xcomp.inds = discretize(xcomp.data,xcomp.edgs);
ycomp.inds = discretize(ycomp.data,ycomp.edgs);
zcomp.inds = discretize(zcomp.data,zcomp.edgs);

wcomp.xctr = xcomp.ctrs;
wcomp.yctr = ycomp.ctrs;
nind = nniz(xcomp.inds) & nniz(ycomp.inds) & nniz(zcomp.inds) & nniz(vals);
wcomp.count = accumarray([xcomp.inds(nind),ycomp.inds(nind),zcomp.inds(nind)],...
                         ones([sum(nind),1]),...
                         [numel(xcomp.ctrs),numel(ycomp.ctrs),numel(zcomp.ctrs)],...
                         @sum);
wcomp.mean = accumarray([xcomp.inds(nind),ycomp.inds(nind),zcomp.inds(nind)],...
                         vals(nind),...
                         [numel(xcomp.ctrs),numel(ycomp.ctrs),numel(zcomp.ctrs)],...
                         @mean);
wcomp.std = accumarray([xcomp.inds(nind),ycomp.inds(nind),zcomp.inds(nind)],...
                         vals(nind),...
                         [numel(xcomp.ctrs),numel(ycomp.ctrs),numel(zcomp.ctrs)],...
                         @std);
