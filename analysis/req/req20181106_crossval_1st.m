function [pfs,metaData] = req20181106_crossval_1st(varargin)
%
%function load_behavior_fields_theta_resolved(varargin)
% Input:
%    Trials
%    SessionListName
%    tag
%    units
%    sampleRate
%    stcMode
%    states
%    feature_fcn: function handel, provides 2 features of interest
%    overwriteFlag
%    
% Saved:         
%    tag
%    sessionListName
%    sampleRate
%    stcMode
%    states
%    feature_fcn
%    analysisHash
%
% Output:
%    pfs: either cellarray or MTAApfs object
%

% ANALYSIS DESCRIPTION -----------------------------------------------------------------------------
% PAG : Primary Analysis Goal
%    Deterimine the prefered theta phase for behavior state depedent rate changes associated with 
%    spatial tuning curves
%
% SAG : Secondary Analysis Goal 
% TAG : Tertiary Analysis Goal
%
% VAR - Analysis variables
%    spike time (res)
%    head position (xyz)
%    local field potential (lfp)
%
% TRN - Transformations
%    FFT of lfp -> gmHMM of mean power within 6-12Hz band -> thetaPeriods (tper).
%    HILBERT of 6-12 Hz bandpass filtered lfp -> thetaPhase
%    DISCRETIZE head position at spike times durng theta states -> theta spike occupancy map.
%    DISCRETIZE head position durng theta states -> theta position occupancy map.
%    ELEMENT wise division of theta spike occupancy map and theta position occpancy map -> spatial 
%      rate map.
%    SELECTION of spike times within the 90th percentile within fixed radius around center of 
%      spatial rate map -> place restricted selection of spike times during theta state.
%    CONVERT head markers positions from Cartesian to polar coordinate system.
%    
% MOD : Analysis Model 
%    meanFiringRate(thetaPhase, headPitch)
% CMD : Causal Model
%     {Sensory Information} EC3 -> CA1(theta[pi,2*pi])
%     {Auto Completion}     CA3 -> CA1(theta[0,pi])
%
% 
% PFSTAGS : hptp : head pitch, theta phase
%           hpef : head pitch, egocentric forward
%
% END ANALYSIS DESCRIPTION -------------------------------------------------------------------------



% GLOBALS ------------------------------------------------------------------------------------------
global MTA_PROJECT_PATH;
%---------------------------------------------------------------------------------------------------


%varargin = {};
% DEFARGS ------------------------------------------------------------------------------------------

pargs = struct('units',              [],                                   ...
               'states',             'theta',                              ...
               'overwrite',          false,                                ...
               'tag',                '',                                   ...
               'binDims',            [0.1,pi/8,0.1],                       ...
               'SmoothingWeights',   [1.8,0.6,1.8],                        ...
               'type',               'xyz',                                ...
               'spkShuffle',         false,                                ...
               'posShuffle',         false,                                ...
               'numIter',            1,                                    ...
               'xyzp',               [],                                   ...
               'boundaryLimits',     [-2,0.8;-pi,pi;-0.8,2],               ...
               'bootstrap',          false,                                ...
               'halfsample',         false,                                ...
               'compute_pfs',        @PlotPFCirc,                          ...
               'autoSaveFlag',       false,                                ...
               'spk',                []                                    ...
               );


defargs = struct('Trials',                        {{}},                                          ...
                 'sessionListName',               'MjgER2016',                                   ...
                 'tag',                           'hbpptbpFSCV1',                                ...
                 'units',                         [],                                            ...
                 'sampleRate',                    250,                                           ...
                 'stcMode',                       'msnn_ppsvd_raux',                             ...
                 'states',                        {{'theta','rear','hloc','hpause',              ...
                                                   'lloc','lpause','groom','sit'}},              ...
                 'feature_fcn',                   @fet_HB_pitchB,                                ...
                 'overwrite',                     false,                                         ...
                 'pargs',                         pargs                                          ...
);
[Trials,sessionListName,tag,units,sampleRate,stcMode,states,feature_fcn,overwrite,pargs] =       ...
    DefaultArgs(varargin,defargs,'--struct');
%---------------------------------------------------------------------------------------------------



% SET Meta Data ------------------------------------------------------------------------------------
analysisHash = DataHash({sessionListName,tag,sampleRate,stcMode,states,func2str(feature_fcn)});
dataFilePath = fullfile(MTA_PROJECT_PATH,'analysis',[mfilename,'-meta-',analysisHash,'.mat']);
metaVars = {'sessionListName','tag','sampleRate','stcMode','states','feature_fcn','analysisHash'};
%---------------------------------------------------------------------------------------------------



% ANALYSIS MAIN ------------------------------------------------------------------------------------
if ~exist(dataFilePath,'file') || overwrite
% LOAD Trial data
% COLLATE unit info
    sessionList = get_session_list(sessionListName);
    Trials = af(@(s) MTATrial.validate(s), sessionList);
    units = cf(@(T)  select_placefields(T),  Trials); 
    units = req20180123_remove_bad_units(units);
    cluSessionMap = [];
    for u = 1:numel(units)
        cluSessionMap = cat(1,cluSessionMap,[u*ones([numel(units{u}),1]),units{u}(:)]);
    end


    % COMPUTE theta resovled behavior fields
    for t = 1:numel(sessionList),
        Trial = Trials{t}; 
        unitSubset = units{t};        
        subjectId = regexp(Trial.name,'^(\w*)-','tokens');
        subjectId = subjectId{1}{1};

% PFT : theta restricted place fields
        pft = pfs_2d_theta(Trial,unitSubset);        
% XYZ : marker positions        
        xyz = resample(preproc_xyz(Trial,'trb'),sampleRate);
% STCM : State Collection Matrix
        stcm = stc2mat(Trial.load('stc',stcMode),xyz,states);        
% LFP : Local Field Potential
        try,   lfp = load(Trial,'lfp',sessionList(t).thetaRefGeneral);
        catch, lfp = load(Trial,'lfp',sessionList(t).thetaRefGeneral);
        end
% $$$         try,   lfp = load(Trial,'lfp',sessionList(t).thetaRef);
% $$$         catch, lfp = load(Trial,'lfp',sessionList(t).thetaRef);
% $$$         end
% PHZ : LFP phase restricted to the theta band [6-12Hz]
        phz = lfp.phase([6,12]);
        phz.data = unwrap(phz.data);
        phz.resample(xyz);    
        phz.data = mod(phz.data+pi,2*pi)-pi;
        lfp.resample(xyz);    
% DRZ : directed rate zone
        drz = compute_drz(Trial,unitSubset,pft,'sampleRate',sampleRate);
% DDZ : directed distance zone        
        ddz = compute_ddz(Trial,unitSubset,pft,'sampleRate',sampleRate);        
% SPK : Unit spike times
        spk = Trial.load('spk',sampleRate,'',unitSubset,'deburst');    
% FET : Behavior space features
        fet = feval(feature_fcn,Trial,sampleRate,false,'trb');
% APER : theta periods without sit or groom
        for s = 2:6
            stcm(find(stcm(:,s),round(sum(nniz(stcm(:,s)))/2),'last'),s) = 0;
        end

        aper = stcm(:,1)==1 & any(stcm(:,2:6),2);

% PARGS : placefield computation arguments 
        
        pargs.units = unitSubset;
        pargs.spk = spk;
        
        pfs = MTAApfs(Trial,'tag',pargs.tag);
        pfs.purge_savefile();
        pfs = Trial;
        for unit = unitSubset,
            pargs.xyzp = copy(fet);
            pargs.xyzp.data = [fet(:,1),phz(:,1),fet(:,2)];
            %pargs.xyzp.data = [fet(:,1),phz(:,spk.map(spk.map(:,1)==unit,2)),fet(:,2)];            
            pargs.units = unit;
            pargs.tag   = tag;
            pargs.states = MTADepoch([],                                                   ...
                                     [],                                                   ...
                                     ThreshCross(aper & abs(drz(:,unit==unitSubset))<0.8   ...
                                                      & abs(ddz(:,unit==unitSubset))<250,  ...
                                                 0.5,0),                                   ...
                                     sampleRate,pargs.xyzp.sync.copy(),                    ...
                                     pargs.xyzp.origin,'TimePeriods','sts',[],'tdrz','d');
            pfsArgs = struct2varargin(pargs);
            pfs = MTAApfs(pfs,pfsArgs{:});    
            if unit==unitSubset(1),  pfs.save();  end
        end%for unit
        pfs.save();
        save(dataFilePath,metaVars{:});
    end%for t 
else
    if iscell(Trials),
        pfs = cf(@(t,u)  MTAApfs(t,u,'tag',tag), Trials,units);
    else
        pfs = MTAApfs(Trials,units,'tag',tag);
    end
end%if ~exist(dataFilePath,'file') || overwrite

metaData = load(dataFilePath);


% $$$ 
% $$$ [pfd] = req20180123_ver5(Trial);
% $$$ 
% $$$ 
% $$$ t = 18;
% $$$ Trial = Trials{t}; 
% $$$ unitSubset = units{t};
% $$$ pfs = MTAApfs(Trial,'tag','hbpptbp');
% $$$ pfs = MTAApfs(Trial,'tag','hbpptbpF');
% $$$ pfs = MTAApfs(Trial,'tag','hbpptbpHS');
% $$$ pfe = MTAApfs(Trial,'tag','ptpefel');
% $$$ pfd = req20180123_ver5(Trial);
% $$$ pft = pfs_2d_theta(Trial,unitSubset);
% $$$ [drz,~,drang] = compute_drz(Trial,unitSubset,pft,'sampleRate',sampleRate);
% $$$ [ddz] = compute_ddz(Trial,unitSubset,pft,'sampleRate',sampleRate);
% $$$ xyz = resample(preproc_xyz(Trial,'trb'),sampleRate);
% $$$ stc = Trial.load('stc','msnn_ppsvd_raux');    
% $$$ stcm = stc2mat(stc,xyz,states);    
% $$$ aper = stcm(:,1)==1 & ~any(stcm(:,[7,8]),2);
% $$$ 
% $$$ 
% $$$ pch = fet_HB_pitchB(Trial,[],false,'trb');        
% $$$ 
% $$$ 
% $$$ 
% $$$ 
% $$$ hfig = figure();
% $$$ clf();
% $$$ hax = tight_subplot(3,13,0.01,0.1);
% $$$ u = unitSubset(1);
% $$$ while u ~=-1,
% $$$     rmap = plot(pfs,u,'mean','colorbar',[],false,0.8);
% $$$     %rmap = plot(pfs,u,1,'colorbar',[],false);    
% $$$     rmax = prctile(rmap(nniz(rmap(:))),98)+2;
% $$$     if isnan(rmax), rmax = 1;end
% $$$     axes(hax(1));
% $$$     plot(pft,u,1,'',[0,rmax],false,'colorMap',@jet);
% $$$     title(num2str(u));
% $$$ % $$$     axes(hax(14));
% $$$ % $$$     plot(pfta,u,1,'',[0,rmax],false,'colorMap',@jet);
% $$$     axes(hax(2));
% $$$     ind = aper & abs(drz(:,u==unitSubset))<0.8 & abs(ddz(:,u==unitSubset))<250;
% $$$     plot(xyz(ind,'hcom',1),xyz(ind,'hcom',2),'.r');
% $$$     xlim([-500,500]);
% $$$     ylim([-500,500]);
% $$$     axes(hax(3));        
% $$$     plot(pfd{1},u,1,'',[0,rmax],false,'colorMap',@jet);
% $$$     title('bhv space');
% $$$     
% $$$     
% $$$     for i = 1:10,
% $$$         axes(hax(i+3));
% $$$ 
% $$$         imagescnan({pfs.adata.bins{[1,3]},sq(rmap(:,mod(i+4,10)+1,:))'},[0,rmax],'colorMap',@jet);
% $$$         axis('xy');
% $$$         title(num2str(pfs.adata.bins{2}(mod(i+4,10)+1)));
% $$$     end
% $$$     %xlim([-1.5,0.5])
% $$$     
% $$$     if sum(rmap(:))~=0,
% $$$         rmapNind = sq(sum(reshape(~isnan(rmap(:)),size(rmap)),2))==10;
% $$$         zmap = reshape(permute(rmap,[1,3,2]),[],10);
% $$$         zmap(repmat(rmapNind(:),[1,10])&isnan(zmap)) = 0;    
% $$$         zmap(repmat(~rmapNind(:),[1,10])) = nan;
% $$$         zmap(zmap<0) = 0;
% $$$         zmap(isnan(zmap(:,1)),:) = [];
% $$$         
% $$$         [LU,LR,FSr,VT] = erpPCA(zmap',4);
% $$$         for v = 1:4,
% $$$             axes(hax(16+v));
% $$$             evec = nan([size(rmap,1),size(rmap,3)]);
% $$$             evec(rmapNind) = LR(:,v);
% $$$             imagesc(pfs.adata.bins{[1,3]},evec');
% $$$             axis('xy');        
% $$$             caxis(repmat(max(abs(caxis())),[1,2]).*[-1,1])
% $$$         end
% $$$         axes(hax(22));
% $$$         plot(VT(:,4),'-+');
% $$$         axes(hax(23));    
% $$$         imagesc(FSr([6:10,1:5],:)');
% $$$     end
% $$$ 
% $$$     rmap = plot(pfe,u,1,'colorbar',[],false);
% $$$     for i = 1:10,
% $$$         axes(hax(i+29));
% $$$ 
% $$$         imagescnan({pfe.adata.bins{[1,3]},sq(rmap(:,mod(i+4,10)+1,:))'},[0,rmax],'colorMap',@jet);
% $$$         axis('xy');
% $$$         title(num2str(pfs.adata.bins{2}(mod(i+4,10)+1)));
% $$$     end
% $$$ 
% $$$     axes(hax(27));
% $$$     colorbar();
% $$$     caxis([0,rmax]);
% $$$     colormap('jet');
% $$$     
% $$$     u = figure_controls(hfig,u,unitSubset,false,[],[]);
% $$$     ForAllSubplots('cla');
% $$$     
% $$$ end
% $$$ 
% $$$ 
% $$$ 
% $$$ figure,
% $$$ for u = unitSubset
% $$$         subplot(1,3,3);    
% $$$     plot(pfd{1},u,1,'',[],false,'colorMap',@jet);
% $$$     title('bhv space');    
% $$$     
% $$$     waitforbuttonpress();
% $$$ end
% $$$ 
% $$$ [pfd] = req20180123_ver5(Trial); 
% $$$ 
% $$$ 
% $$$ pfs = MTAApfs(Trial,'tag','hbptpefel');
% $$$ 
% $$$ hfig = figure();
% $$$ hax = tight_subplot(10,13,0.01,0.1);
% $$$ u = unitSubset(1);
% $$$ while 1,
% $$$ %for u = unitSubset
% $$$     try
% $$$     rmap = plot(pfs,u,1,'colorbar',[],false);
% $$$     rmax = prctile(rmap(nniz(rmap(:))),99.9)+4;
% $$$     axes(hax(1));
% $$$     plot(pft,u,1,'colorbar',[0,rmax],false,'colorMap',@jet);
% $$$     title(num2str(u));
% $$$     axes(hax(2));    
% $$$     plot(pfd{1},u,1,'colorbar',[0,rmax],false,'colorMap',@jet);
% $$$     title('bhv space');
% $$$     
% $$$ for i = 1:10,
% $$$     for j = 1:10
% $$$         ind = sub2ind([13,10],i+2,j);
% $$$         
% $$$     axes(hax(ind));
% $$$     imagescnan({pfs.adata.bins{[3,4]},sq(rmap(11-j,mod(i+4,10)+1,:,:))'},[0,rmax],'colorMap',@jet);
% $$$     axis('xy');
% $$$     title(num2str(pfs.adata.bins{2}(mod(i+4,10)+1)));
% $$$     Lines(0,[],'m');
% $$$     Lines([],0,'m');
% $$$ end    
% $$$ end
% $$$ end
% $$$ u = figure_controls(hfig,u,unitSubset,false,[],[])
% $$$ ForAllSubplots('cla');
% $$$ end
% $$$ 
% $$$ 
% $$$ pfa = MTAApfs(Trial,'tag','hptp');
% $$$ pfe = MTAApfs(Trial,'tag','hpef');
% $$$ 
% $$$ pft = pfs_2d_theta(Trial);
% $$$ 
% $$$ figure,
% $$$ for u = unitSubset,
% $$$     clf();
% $$$     subplot(241);
% $$$     plot(pft,u,1,'colorbar',[0,10],false,'colorMap',@jet);
% $$$     title(num2str(u));
% $$$     subplot(242);
% $$$     plot(pfd{1},u,1,'colorbar',[0,10],false,'colorMap',@jet);
% $$$     title('bhv space');
% $$$     subplot(243);
% $$$     plot(pfe,u,1,'colorbar',[0,10],false,'colorMap',@jet);
% $$$     ylabel('ego front/back')
% $$$     xlabel('head pitch');
% $$$     subplot(244);    
% $$$     plot(pfa,u,1,'colorbar',[0,10],false,'colorMap',@jet);    
% $$$     ylabel('theta phase')
% $$$     xlabel('head pitch');
% $$$     hax = subplot(248);    
% $$$     plot(pfa,u,1,'colorbar',[0,10],false,'colorMap',@jet);    
% $$$     ylabel('theta phase')
% $$$     xlabel('head pitch');
% $$$     drawnow();
% $$$     hax.Position(2) =     hax.Position(2) +0.135;
% $$$     drawnow();    
% $$$     waitforbuttonpress();
% $$$ end
% $$$ 
% $$$ 
% $$$ rmap = pfd.data.rateMap;
% $$$ rmap(~nniz(rmap(:)))=0;
% $$$ [U,S,V] = svd(rmap',0);
% $$$ 
% $$$ figure,
% $$$ for i = 1:10,
% $$$     subplot(2,5,i);
% $$$     imagesc(reshape(V(:,i),pfd.adata.binSizes')');
% $$$     axis('xy');
% $$$     caxis([-0.06,0.06]);
% $$$ end
% $$$ 
% $$$ 
% $$$ [~,V,FSr,VT] = erpPCA(rmap',10);
% $$$ 
% $$$ figure,
% $$$ for i = 1:10,
% $$$     subplot(2,5,i);
% $$$     imagesc(reshape(V(:,i),pfd.adata.binSizes')');
% $$$     axis('xy');
% $$$     caxis([-0.03,0.03]);
% $$$ end
% $$$ 
% $$$ 
% $$$ % SET interp parameters                
% $$$ interpParPfs = struct('bins',{{linspace(-500,500,50),...
% $$$                     linspace(-500,500,50),...
% $$$                     linspace(  -2,  2,50)}},...
% $$$                       'nanMaskThreshold', 0.1,...
% $$$                       'methodNanMap',     'cubic',...
% $$$                       'methodRateMap',    'cubic');
% --------------------------------------------------------------------------------------------------

        % END ANALYSIS MAIN --------------------------------------------------------------------------------


        % Old Versions

% $$$ 
% $$$ % COMPUTE conditional firing rate expectation for pitch and theta state
% $$$     pargs = struct('units',              unitSubset,                           ...
% $$$                    'states',             'theta',                              ...
% $$$                    'overwrite',          false,                                ...
% $$$                    'tag',                'hptp',                               ...
% $$$                    'binDims',            [ 0.1, 0.3],                          ...
% $$$                    'SmoothingWeights',   [1.5,1.5],                            ...
% $$$                    'type',               'xy',                                 ...
% $$$                    'spkShuffle',         false,                                ...
% $$$                    'posShuffle',         false,                                ...
% $$$                    'numIter',            1,                                    ...
% $$$                    'xyzp',               [],                                   ...
% $$$                    'boundaryLimits',     [-2,2;-pi,pi],                        ...
% $$$                    'bootstrap',          false,                                ...
% $$$                    'halfsample',         false,                                ...
% $$$                    'compute_pfs',        @PlotPFCirc,                          ...
% $$$                    'autoSaveFlag',       false                                 ...
% $$$                    );
% $$$     
% $$$     pfs = Trial;
% $$$     for unit = unitSubset,
% $$$         pargs.xyzp = copy(pch);
% $$$         pargs.xyzp.data = [pch.data,phz(:,spk.map(spk.map(:,1)==unit,2))];
% $$$         pargs.units = unit;
% $$$         pargs.states = MTADepoch([],                                                ...
% $$$                                  [],                                                ...
% $$$                                  ThreshCross(tper                                   ...
% $$$                                              & abs(drz(:,unit==unitSubset))<0.8   ...
% $$$                                              & abs(ddz(:,unit==unitSubset))<250,  ...
% $$$                                              0.5,1),                                ...
% $$$                                  sampleRate,xyzp.sync.copy(),                       ...
% $$$                                  xyzp.origin,'TimePeriods','sts',[],'tdrz','d');
% $$$         
% $$$         pfsArgs = struct2varargin(pargs);
% $$$         pfs = MTAApfs(pfs,pfsArgs{:});    
% $$$         if unit==unitSubset(1),
% $$$             pfs.save();
% $$$         end
% $$$     end
% $$$     pfs.save();
% $$$ 
% $$$ 
% $$$ 
% $$$ % COMPUTE conditional firing rate expectation for pitch and theta state and ego
% $$$     pargs = struct('units',              unitSubset,                           ...
% $$$                    'states',             'theta',                              ...
% $$$                    'overwrite',          false,                                ...
% $$$                    'tag',                'hpef',                               ...
% $$$                    'binDims',            [ 0.1, 30],                           ...
% $$$                    'SmoothingWeights',   [1.5,1.5],                            ...
% $$$                    'type',               'xy',                                 ...
% $$$                    'spkShuffle',         false,                                ...
% $$$                    'posShuffle',         false,                                ...
% $$$                    'numIter',            1,                                    ...
% $$$                    'xyzp',               [],                                   ...
% $$$                    'boundaryLimits',     [-2,2;-300,300],                      ...
% $$$                    'bootstrap',          false,                                ...
% $$$                    'halfsample',         false,                                ...
% $$$                    'compute_pfs',        @PlotPFCirc,                          ...
% $$$                    'autoSaveFlag',       false                                 ...
% $$$                    );
% $$$     
% $$$     pfs = Trial;
% $$$     for unit = unitSubset,
% $$$         [mxr,mxp] = pft.maxRate(unit);        
% $$$         pfsCenterHR = MTADfet.encapsulate(Trial,                                               ...
% $$$                                           multiprod(bsxfun(@minus,mxp,sq(fxyz(:,'hcom',[1,2]))),...
% $$$                                                     hvec,2,[2,3]),                             ...
% $$$                                           sampleRate,                                          ...
% $$$                                           'placefield_center_referenced_to_head',              ...
% $$$                                           'pfsCenterHR',                                       ...
% $$$                                           'p'                                                  ...
% $$$                                           );
% $$$         pargs.xyzp = copy(pch);
% $$$         pargs.xyzp.data = [pch.data,pfsCenterHR(:,1)];
% $$$         pargs.units = unit;
% $$$         pargs.states = MTADepoch([],                                                ...
% $$$                                  [],                                                ...
% $$$                                  ThreshCross(tper                                   ...
% $$$                                              & abs(ddz(:,unit==unitSubset))<350,    ...
% $$$                                              0.5,1),                                ...
% $$$                                  sampleRate,xyzp.sync.copy(),                       ...
% $$$                                  xyzp.origin,'TimePeriods','sts',[],'tdrz','d');
% $$$         
% $$$         pfsArgs = struct2varargin(pargs);
% $$$         pfs = MTAApfs(pfs,pfsArgs{:});    
% $$$         if unit==unitSubset(1),
% $$$             pfs.save();
% $$$         end
% $$$     end
% $$$     pfs.save();
% $$$     
% $$$ % COMPUTE conditional firing rate expectation for pitch and theta state and ego
% $$$ 
% $$$     pargs = struct('units',              unitSubset,                           ...
% $$$                    'states',             'theta',                              ...
% $$$                    'overwrite',          false,                                ...
% $$$                    'tag',                'hptpef',                             ...
% $$$                    'binDims',            [ 0.1, 0.3, 30],                      ...
% $$$                    'SmoothingWeights',   [1.5,1.5,1.5],                        ...
% $$$                    'type',               'xyz',                                ...
% $$$                    'spkShuffle',         false,                                ...
% $$$                    'posShuffle',         false,                                ...
% $$$                    'numIter',            1,                                    ...
% $$$                    'xyzp',               [],                                   ...
% $$$                    'boundaryLimits',     [-2,2;-pi,pi;-300,300],               ...
% $$$                    'bootstrap',          false,                                ...
% $$$                    'halfsample',         false,                                ...
% $$$                    'compute_pfs',        @PlotPFCirc,                          ...
% $$$                    'autoSaveFlag',       false                                 ...
% $$$                    );
% $$$     
% $$$     pfs = Trial;
% $$$     for unit = unitSubset,
% $$$         [mxr,mxp] = pft.maxRate(unit);        
% $$$         pfsCenterHR = MTADfet.encapsulate(Trial,                                               ...
% $$$                                           multiprod(bsxfun(@minus,mxp,sq(fxyz(:,'hcom',[1,2]))),...
% $$$                                                     hvec,2,[2,3]),                             ...
% $$$                                           sampleRate,                                          ...
% $$$                                           'placefield_center_referenced_to_head',              ...
% $$$                                           'pfsCenterHR',                                       ...
% $$$                                           'p'                                                  ...
% $$$                                           );
% $$$         pargs.xyzp = copy(pch);
% $$$         pargs.xyzp.data = [pch.data,phz(:,spk.map(spk.map(:,1)==unit,2)),pfsCenterHR(:,1)];
% $$$         pargs.units = unit;
% $$$         pargs.states = MTADepoch([],                                                ...
% $$$                                  [],                                                ...
% $$$                                  ThreshCross(tper,0.5,1),                           ...
% $$$                                  sampleRate,xyzp.sync.copy(),                       ...
% $$$                                  xyzp.origin,'TimePeriods','sts',[],'tdrz','d');
% $$$         
% $$$         pfsArgs = struct2varargin(pargs);
% $$$         pfs = MTAApfs(pfs,pfsArgs{:});    
% $$$         if unit==unitSubset(1),
% $$$             pfs.save();
% $$$         end
% $$$     end
% $$$     pfs.save();
% $$$ 
% $$$ 
% $$$     pargs = struct('units',              unitSubset,                           ...
% $$$                    'states',             'theta',                              ...
% $$$                    'overwrite',          false,                                ...
% $$$                    'tag',                'hbptpef',                             ...
% $$$                    'binDims',            [ 0.1, 0.6, 30],                      ...
% $$$                    'SmoothingWeights',   [1.5,1.5,1.5],                        ...
% $$$                    'type',               'xyz',                                ...
% $$$                    'spkShuffle',         false,                                ...
% $$$                    'posShuffle',         false,                                ...
% $$$                    'numIter',            1,                                    ...
% $$$                    'xyzp',               [],                                   ...
% $$$                    'boundaryLimits',     [-2,2;-pi,pi;-300,300],               ...
% $$$                    'bootstrap',          false,                                ...
% $$$                    'halfsample',         false,                                ...
% $$$                    'compute_pfs',        @PlotPFCirc,                          ...
% $$$                    'autoSaveFlag',       false                                 ...
% $$$                    );
% $$$     
% $$$     pfs = Trial;
% $$$     for unit = unitSubset,
% $$$         [mxr,mxp] = pft.maxRate(unit);        
% $$$         pfsCenterHR = MTADfet.encapsulate(Trial,                                               ...
% $$$                                           multiprod(bsxfun(@minus,mxp,sq(fxyz(:,'hcom',[1,2]))),...
% $$$                                                     hvec,2,[2,3]),                             ...
% $$$                                           sampleRate,                                          ...
% $$$                                           'placefield_center_referenced_to_head',              ...
% $$$                                           'pfsCenterHR',                                       ...
% $$$                                           'p'                                                  ...
% $$$                                           );
% $$$         pargs.xyzp = copy(pchb);
% $$$         pargs.xyzp.data = [pchb.data(:,1),phz(:,spk.map(spk.map(:,1)==unit,2)),pfsCenterHR(:,1)];
% $$$         pargs.units = unit;
% $$$         pargs.states = MTADepoch([],                                                ...
% $$$                                  [],                                                ...
% $$$                                  ThreshCross(tper,0.5,1),                           ...
% $$$                                  sampleRate,xyzp.sync.copy(),                       ...
% $$$                                  xyzp.origin,'TimePeriods','sts',[],'tdrz','d');
% $$$         
% $$$         pfsArgs = struct2varargin(pargs);
% $$$         pfs = MTAApfs(pfs,pfsArgs{:});    
% $$$         if unit==unitSubset(1),
% $$$             pfs.save();
% $$$         end
% $$$     end
% $$$     pfs.save();
% $$$ 
% $$$ 
% $$$     pargs = struct('units',              unitSubset,                           ...
% $$$                    'states',             'theta',                              ...
% $$$                    'overwrite',          false,                                ...
% $$$                    'tag',                'hbptpefel',                          ...
% $$$                    'binDims',            [ 0.2, 0.6, 30,30],                   ...
% $$$                    'SmoothingWeights',   [0.8,0.8,1.5,1.5],                    ...
% $$$                    'type',               'xyzp',                               ...
% $$$                    'spkShuffle',         false,                                ...
% $$$                    'posShuffle',         false,                                ...
% $$$                    'numIter',            1,                                    ...
% $$$                    'xyzp',               [],                                   ...
% $$$                    'boundaryLimits',     [-1.5,0.5;-pi,pi;-300,300;-300,300],      ...
% $$$                    'bootstrap',          false,                                ...
% $$$                    'halfsample',         false,                                ...
% $$$                    'compute_pfs',        @PlotPFCirc,                          ...
% $$$                    'autoSaveFlag',       false                                 ...
% $$$                    );
% $$$     
% $$$     pfs = Trial;
% $$$     for unit = unitSubset,
% $$$         [mxr,mxp] = pft.maxRate(unit);        
% $$$         pfsCenterHR = MTADfet.encapsulate(Trial,                                               ...
% $$$                                           multiprod(bsxfun(@minus,mxp,sq(fxyz(:,'hcom',[1,2]))),...
% $$$                                                     hvec,2,[2,3]),                             ...
% $$$                                           sampleRate,                                          ...
% $$$                                           'placefield_center_referenced_to_head',              ...
% $$$                                           'pfsCenterHR',                                       ...
% $$$                                           'p'                                                  ...
% $$$                                           );
% $$$         pargs.xyzp = copy(pchb);
% $$$         pargs.xyzp.data = [pchb.data(:,1),phz(:,spk.map(spk.map(:,1)==unit,2)),pfsCenterHR(:,:)];
% $$$         pargs.units = unit;
% $$$         pargs.states = MTADepoch([],                                                ...
% $$$                                  [],                                                ...
% $$$                                  ThreshCross(tper,0.5,1),                           ...
% $$$                                  sampleRate,xyzp.sync.copy(),                       ...
% $$$                                  xyzp.origin,'TimePeriods','sts',[],'tdrz','d');
% $$$         
% $$$         pfsArgs = struct2varargin(pargs);
% $$$         pfs = MTAApfs(pfs,pfsArgs{:});    
% $$$         if unit==unitSubset(1),
% $$$             pfs.save();
% $$$         end
% $$$     end
% $$$     pfs.save();
% $$$     
% $$$ 
% $$$ 
% $$$     pargs = struct('units',              unitSubset,                           ...
% $$$                    'states',             'theta',                              ...
% $$$                    'overwrite',          false,                                ...
% $$$                    'tag',                'ptpefel',                          ...
% $$$                    'binDims',            [30, 0.6, 30],                        ...
% $$$                    'SmoothingWeights',   [1.5,0.8,1.5],                        ...
% $$$                    'type',               'xyz',                               ...
% $$$                    'spkShuffle',         false,                                ...
% $$$                    'posShuffle',         false,                                ...
% $$$                    'numIter',            1,                                    ...
% $$$                    'xyzp',               [],                                   ...
% $$$                    'boundaryLimits',     [-300,300;-pi,pi;-300,300],      ...
% $$$                    'bootstrap',          false,                                ...
% $$$                    'halfsample',         false,                                ...
% $$$                    'compute_pfs',        @PlotPFCirc,                          ...
% $$$                    'autoSaveFlag',       false                                 ...
% $$$                    );
% $$$     
% $$$     pfs = MTAApfs(Trial,'tag','ptpefel');
% $$$     pfs.purge_savefile();    
% $$$     pfs = Trial;
% $$$     for unit = unitSubset,
% $$$         [mxr,mxp] = pft.maxRate(unit);        
% $$$         pfsCenterHR = MTADfet.encapsulate(Trial,                                               ...
% $$$                                           multiprod(bsxfun(@minus,mxp,sq(fxyz(:,'hcom',[1,2]))),...
% $$$                                                     hvec,2,[2,3]),                             ...
% $$$                                           sampleRate,                                          ...
% $$$                                           'placefield_center_referenced_to_head',              ...
% $$$                                           'pfsCenterHR',                                       ...
% $$$                                           'p'                                                  ...
% $$$                                           );
% $$$         pargs.xyzp = copy(pchb);
% $$$         pargs.xyzp.data = [pfsCenterHR(:,1),phz(:,spk.map(spk.map(:,1)==unit,2)),pfsCenterHR(:,2)];
% $$$         pargs.units = unit;
% $$$         pargs.states = MTADepoch([],                                                ...
% $$$                                  [],                                                ...
% $$$                                  ThreshCross(tper,0.5,1),                           ...
% $$$                                  sampleRate,xyzp.sync.copy(),                       ...
% $$$                                  xyzp.origin,'TimePeriods','sts',[],'tdrz','d');
% $$$         
% $$$         pfsArgs = struct2varargin(pargs);
% $$$         pfs = MTAApfs(pfs,pfsArgs{:});    
% $$$         if unit==unitSubset(1),
% $$$             pfs.save();
% $$$         end
% $$$     end
% $$$     pfs.save();
% $$$     

% $$$     pargs = struct('units',              unitSubset,                           ...
% $$$                    'states',             'theta',                              ...
% $$$                    'overwrite',          false,                                ...
% $$$                    'tag',                'hbpptbp',                            ...
% $$$                    'binDims',            [0.2,0.6,0.2],                        ...
% $$$                    'SmoothingWeights',   [1.5,0.8,1.5],                        ...
% $$$                    'type',               'xyz',                                ...
% $$$                    'spkShuffle',         false,                                ...
% $$$                    'posShuffle',         false,                                ...
% $$$                    'numIter',            1,                                    ...
% $$$                    'xyzp',               [],                                   ...
% $$$                    'boundaryLimits',     [-2.25,1;-pi,pi;-0.5,2],              ...
% $$$                    'bootstrap',          false,                                ...
% $$$                    'halfsample',         false,                                ...
% $$$                    'compute_pfs',        @PlotPFCirc,                          ...
% $$$                    'autoSaveFlag',       false                                 ...
% $$$                    );
% $$$     pargs = struct('units',              unitSubset,                           ...
% $$$                    'states',             'theta',                              ...
% $$$                    'overwrite',          false,                                ...
% $$$                    'tag',                'hbpptbpHS',                          ...
% $$$                    'binDims',            [0.3,0.6,0.3],                        ...
% $$$                    'SmoothingWeights',   [1.2,0.8,1.2],                        ...
% $$$                    'type',               'xyz',                                ...
% $$$                    'spkShuffle',         false,                                ...
% $$$                    'posShuffle',         false,                                ...
% $$$                    'numIter',            1001,                                 ...
% $$$                    'xyzp',               [],                                   ...
% $$$                    'boundaryLimits',     [-2.25,1;-pi,pi;-0.5,2],              ...
% $$$                    'bootstrap',          false,                                ...
% $$$                    'halfsample',         true,                                 ...
% $$$                    'compute_pfs',        @PlotPFCirc,                          ...
% $$$                    'autoSaveFlag',       false                                 ...
% $$$                    );

% $$$     pargs = struct('units',              unitSubset,                           ...
% $$$                    'states',             'theta',                              ...
% $$$                    'overwrite',          false,                                ...
% $$$                    'tag',                'hbpptbpF',                           ...
% $$$                    'binDims',            [0.25,0.6,0.25],                      ...
% $$$                    'SmoothingWeights',   [0.8,0.8,0.8],                        ...
% $$$                    'type',               'xyz',                                ...
% $$$                    'spkShuffle',         false,                                ...
% $$$                    'posShuffle',         false,                                ...
% $$$                    'numIter',            1001,                                 ...
% $$$                    'xyzp',               [],                                   ...
% $$$                    'boundaryLimits',     [-2.25,1;-pi,pi;-0.5,2],              ...
% $$$                    'bootstrap',          false,                                ...
% $$$                    'halfsample',         true,                                 ...
% $$$                    'compute_pfs',        @PlotPFCirc,                          ...
% $$$                    'autoSaveFlag',       false                                 ...
% $$$                    );
% $$$     pargs = struct('units',              unitSubset,                           ...
% $$$                    'states',             'theta',                              ...
% $$$                    'overwrite',          false,                                ...
% $$$                    'tag',                'hbpptbpFS',                          ...
% $$$                    'binDims',            [0.1,0.4,0.1],                        ...
% $$$                    'SmoothingWeights',   [2.5,1.1,2.5],                        ...
% $$$                    'type',               'xyz',                                ...
% $$$                    'spkShuffle',         false,                                ...
% $$$                    'posShuffle',         false,                                ...
% $$$                    'numIter',            1001,                                 ...
% $$$                    'xyzp',               [],                                   ...
% $$$                    'boundaryLimits',     [-2.25,1;-pi,pi;-0.5,2],              ...
% $$$                    'bootstrap',          false,                                ...
% $$$                    'halfsample',         true,                                 ...
% $$$                    'compute_pfs',        @PlotPFCirc,                          ...
% $$$                    'autoSaveFlag',       false                                 ...
% $$$                    );

% $$$     pargs = struct('units',              unitSubset,                           ...
% $$$                    'states',             'theta',                              ...
% $$$                    'overwrite',          false,                                ...
% $$$                    'tag',                'hbpptbpFS1',                         ...
% $$$                    'binDims',            [0.1,0.4,0.1],                        ...
% $$$                    'SmoothingWeights',   [2.5,1.1,2.5],                        ...
% $$$                    'type',               'xyz',                                ...
% $$$                    'spkShuffle',         false,                                ...
% $$$                    'posShuffle',         false,                                ...
% $$$                    'numIter',            1,                                 ...
% $$$                    'xyzp',               [],                                   ...
% $$$                    'boundaryLimits',     [-2.25,1;-pi,pi;-0.5,2],              ...
% $$$                    'bootstrap',          false,                                ...
% $$$                    'halfsample',         false,                                 ...
% $$$                    'compute_pfs',        @PlotPFCirc,                          ...
% $$$                    'autoSaveFlag',       false                                 ...
% $$$                    );

% $$$     pargs = struct('units',              unitSubset,                           ...
% $$$                    'states',             'theta',                              ...
% $$$                    'overwrite',          false,                                ...
% $$$                    'tag',                'hbpptbpFS1v3',                       ...
% $$$                    'binDims',            [0.1,pi/8,0.1],                       ...
% $$$                    'SmoothingWeights',   [2,1.1,2],                            ...
% $$$                    'type',               'xyz',                                ...
% $$$                    'spkShuffle',         false,                                ...
% $$$                    'posShuffle',         false,                                ...
% $$$                    'numIter',            1,                                    ...
% $$$                    'xyzp',               [],                                   ...
% $$$                    'boundaryLimits',     [-1.8,1;-pi,pi;-0.8,2],               ...
% $$$                    'bootstrap',          false,                                ...
% $$$                    'halfsample',         false,                                ...
% $$$                    'compute_pfs',        @PlotPFCirc,                          ...
% $$$                    'autoSaveFlag',       false                                 ...
% $$$                    );
